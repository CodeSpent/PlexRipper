// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlexRipper.Data;

namespace PlexRipper.Data.Migrations
{
    [DbContext(typeof(PlexRipperDbContext))]
    [Migration("20211219143552_AddedRootDownloadTaskIdToDownloadTask")]
    partial class AddedRootDownloadTaskIdToDownloadTask
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("PlexRipper.Domain.DownloadFileTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePathsCompressed")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadTaskId");

                    b.ToTable("FileTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("DataReceived")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DataTotal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DestinationDirectory")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationFolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DownloadDirectory")
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadFolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DownloadSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DownloadStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadTaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileLocationUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Quality")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RootDownloadTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationFolderId");

                    b.HasIndex("DownloadFolderId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.HasIndex("RootDownloadTaskId");

                    b.ToTable("DownloadTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadWorkerTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadWorkerTaskId");

                    b.ToTable("DownloadWorkerTasksLogs");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BytesReceived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DownloadStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EndByte")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartIndex")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartByte")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TempDirectory")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadTaskId");

                    b.ToTable("DownloadWorkerTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.FolderPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DirectoryPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FolderPaths");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectoryPath = "/downloads",
                            DisplayName = "Download Path",
                            FolderType = "DownloadFolder",
                            MediaType = "None"
                        },
                        new
                        {
                            Id = 2,
                            DirectoryPath = "/movies",
                            DisplayName = "Movie Destination Path",
                            FolderType = "MovieFolder",
                            MediaType = "Movie"
                        },
                        new
                        {
                            Id = 3,
                            DirectoryPath = "/tvshows",
                            DisplayName = "Tv Show Destination Path",
                            FolderType = "TvShowFolder",
                            MediaType = "TvShow"
                        },
                        new
                        {
                            Id = 4,
                            DirectoryPath = "/music",
                            DisplayName = "Music Destination Path",
                            FolderType = "MusicFolder",
                            MediaType = "Music"
                        },
                        new
                        {
                            Id = 5,
                            DirectoryPath = "/photos",
                            DisplayName = "Photos Destination Path",
                            FolderType = "PhotosFolder",
                            MediaType = "Photos"
                        },
                        new
                        {
                            Id = 6,
                            DirectoryPath = "/other",
                            DisplayName = "Other Videos Destination Path",
                            FolderType = "OtherVideosFolder",
                            MediaType = "OtherVideos"
                        },
                        new
                        {
                            Id = 7,
                            DirectoryPath = "/games",
                            DisplayName = "Games Videos Destination Path",
                            FolderType = "GamesVideosFolder",
                            MediaType = "Games"
                        },
                        new
                        {
                            Id = 8,
                            DirectoryPath = "/",
                            DisplayName = "Reserved #1 Destination Path",
                            FolderType = "None",
                            MediaType = "None"
                        },
                        new
                        {
                            Id = 9,
                            DirectoryPath = "/",
                            DisplayName = "Reserved #2 Destination Path",
                            FolderType = "None",
                            MediaType = "None"
                        },
                        new
                        {
                            Id = 10,
                            DirectoryPath = "/",
                            DisplayName = "Reserved #3 Destination Path",
                            FolderType = "None",
                            MediaType = "None"
                        });
                });

            modelBuilder.Entity("PlexRipper.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthenticationToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasPassword")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<long>("PlexId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlexAccounts");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountLibrary", b =>
                {
                    b.Property<int>("PlexAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexAccountId", "PlexLibraryId", "PlexServerId");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexAccountLibraries");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountServer", b =>
                {
                    b.Property<int>("PlexAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AuthTokenCreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Owned")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexAccountId", "PlexServerId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexAccountServers");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlexGenres");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultDestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LibraryLocationPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaData")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDestinationId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexLibraries");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT");

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieGenre", b =>
                {
                    b.Property<int>("PlexMoviesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlexMovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexMoviesId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.HasIndex("PlexMovieId");

                    b.ToTable("PlexMovieGenres");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieRole", b =>
                {
                    b.Property<int>("PlexMoviesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlexMovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlexRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexMoviesId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.HasIndex("PlexMovieId");

                    b.HasIndex("PlexRoleId");

                    b.ToTable("PlexMovieRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlexRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalAddresses")
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Scheme")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ServerFixApplyDNSFix")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlexServers");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexServerStatuses");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT");

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexTvShows");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT");

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("TvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TvShowSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.HasIndex("TvShowId");

                    b.HasIndex("TvShowSeasonId");

                    b.ToTable("PlexTvShowEpisodes");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowGenre", b =>
                {
                    b.Property<int>("PlexTvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexTvShowId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.ToTable("PlexTvShowGenre");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowRole", b =>
                {
                    b.Property<int>("PlexTvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexTvShowId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.ToTable("PlexTvShowRole");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT");

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("TvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.HasIndex("TvShowId");

                    b.ToTable("PlexTvShowSeason");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadFileTask", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTask", "DownloadTask")
                        .WithMany()
                        .HasForeignKey("DownloadTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadTask");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTask", b =>
                {
                    b.HasOne("PlexRipper.Domain.FolderPath", "DestinationFolder")
                        .WithMany()
                        .HasForeignKey("DestinationFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.FolderPath", "DownloadFolder")
                        .WithMany()
                        .HasForeignKey("DownloadFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.DownloadTask", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("DownloadTasks")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.DownloadTask", "RootDownloadTask")
                        .WithMany()
                        .HasForeignKey("RootDownloadTaskId");

                    b.Navigation("DestinationFolder");

                    b.Navigation("DownloadFolder");

                    b.Navigation("Parent");

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");

                    b.Navigation("RootDownloadTask");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerLog", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadWorkerTask", "DownloadTask")
                        .WithMany("DownloadWorkerTaskLogs")
                        .HasForeignKey("DownloadWorkerTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadTask");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerTask", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTask", "DownloadTask")
                        .WithMany("DownloadWorkerTasks")
                        .HasForeignKey("DownloadTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadTask");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountLibrary", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexAccount", "PlexAccount")
                        .WithMany()
                        .HasForeignKey("PlexAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("PlexAccountLibraries")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexAccount");

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountServer", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexAccount", "PlexAccount")
                        .WithMany("PlexAccountServers")
                        .HasForeignKey("PlexAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("PlexAccountServers")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexAccount");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexLibrary", b =>
                {
                    b.HasOne("PlexRipper.Domain.FolderPath", "DefaultDestination")
                        .WithMany("PlexLibraries")
                        .HasForeignKey("DefaultDestinationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("PlexLibraries")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultDestination");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovie", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("Movies")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieGenre", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany("PlexMovies")
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexMovie", "PlexMovie")
                        .WithMany("PlexMovieGenres")
                        .HasForeignKey("PlexMovieId");

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieRole", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany()
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexMovie", "PlexMovie")
                        .WithMany("PlexMovieRoles")
                        .HasForeignKey("PlexMovieId");

                    b.HasOne("PlexRipper.Domain.PlexRole", null)
                        .WithMany("PlexMovieRoles")
                        .HasForeignKey("PlexRoleId");

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerStatus", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("ServerStatus")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShow", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("TvShows")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowEpisode", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany()
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "TvShow")
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShowSeason", "TvShowSeason")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");

                    b.Navigation("TvShow");

                    b.Navigation("TvShowSeason");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowGenre", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany()
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "PlexTvShow")
                        .WithMany("PlexTvShowGenres")
                        .HasForeignKey("PlexTvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexTvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowRole", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany()
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "PlexTvShow")
                        .WithMany("PlexTvShowRoles")
                        .HasForeignKey("PlexTvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexTvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowSeason", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany()
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTask", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DownloadWorkerTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerTask", b =>
                {
                    b.Navigation("DownloadWorkerTaskLogs");
                });

            modelBuilder.Entity("PlexRipper.Domain.FolderPath", b =>
                {
                    b.Navigation("PlexLibraries");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccount", b =>
                {
                    b.Navigation("PlexAccountServers");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexGenre", b =>
                {
                    b.Navigation("PlexMovies");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexLibrary", b =>
                {
                    b.Navigation("DownloadTasks");

                    b.Navigation("Movies");

                    b.Navigation("PlexAccountLibraries");

                    b.Navigation("TvShows");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovie", b =>
                {
                    b.Navigation("PlexMovieGenres");

                    b.Navigation("PlexMovieRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexRole", b =>
                {
                    b.Navigation("PlexMovieRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServer", b =>
                {
                    b.Navigation("PlexAccountServers");

                    b.Navigation("PlexLibraries");

                    b.Navigation("ServerStatus");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShow", b =>
                {
                    b.Navigation("PlexTvShowGenres");

                    b.Navigation("PlexTvShowRoles");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowSeason", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
